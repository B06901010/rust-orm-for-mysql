"name" => Some(& self.name as & dyn std :: any :: Any),
"age" => Some(& self.age as & dyn std :: any :: Any),
"id" => Some(& self.id as & dyn std :: any :: Any),
"amount" => Some(& self.amount as & dyn std :: any :: Any),
"customer_name" => Some(& self.customer_name as & dyn std :: any :: Any),
{"message":"trace_macro","code":null,"level":"note","spans":[{"file_name":"tests/macro_test.rs","byte_start":1694,"byte_end":1737,"line_start":70,"line_end":70,"column_start":13,"column_end":56,"is_primary":true,"text":[{"text":"            eprintln!(\"Field value: {:?}\", field_value);","highlight_start":13,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expanding `eprintln! { \"Field value: {:?}\", field_value }`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to `{\n    $crate :: io ::\n    _eprint($crate :: format_args_nl! (\"Field value: {:?}\", field_value)) ;\n}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m\u001b[1m: trace_macro\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:70:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            eprintln!(\"Field value: {:?}\", field_value);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expanding `eprintln! { \"Field value: {:?}\", field_value }`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to `{\u001b[0m\n\u001b[0m               $crate :: io ::\u001b[0m\n\u001b[0m               _eprint($crate :: format_args_nl! (\"Field value: {:?}\", field_value)) ;\u001b[0m\n\u001b[0m           }`\u001b[0m\n\n"}
{"message":"trace_macro","code":null,"level":"note","spans":[{"file_name":"tests/macro_test.rs","byte_start":1768,"byte_end":1796,"line_start":72,"line_end":72,"column_start":13,"column_end":41,"is_primary":true,"text":[{"text":"            eprintln!(\"Field not found\");","highlight_start":13,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expanding `eprintln! { \"Field not found\" }`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to `{ $crate :: io :: _eprint($crate :: format_args_nl! (\"Field not found\")) ; }`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m\u001b[1m: trace_macro\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:72:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            eprintln!(\"Field not found\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expanding `eprintln! { \"Field not found\" }`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to `{ $crate :: io :: _eprint($crate :: format_args_nl! (\"Field not found\")) ; }`\u001b[0m\n\n"}
{"message":"trace_macro","code":null,"level":"note","spans":[{"file_name":"tests/macro_test.rs","byte_start":1817,"byte_end":1832,"line_start":75,"line_end":75,"column_start":9,"column_end":24,"is_primary":true,"text":[{"text":"        assert_eq!(1,0);","highlight_start":9,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expanding `assert_eq! { 1, 0 }`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to `match(& 1, & 0)\n{\n    (left_val, right_val) =>\n    {\n        if! (* left_val == * right_val)\n        {\n            let kind = $crate :: panicking :: AssertKind :: Eq ; $crate ::\n            panicking ::\n            assert_failed(kind, & * left_val, & * right_val, $crate :: option\n            :: Option :: None) ;\n        }\n    }\n}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m\u001b[1m: trace_macro\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:75:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        assert_eq!(1,0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expanding `assert_eq! { 1, 0 }`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to `match(& 1, & 0)\u001b[0m\n\u001b[0m           {\u001b[0m\n\u001b[0m               (left_val, right_val) =>\u001b[0m\n\u001b[0m               {\u001b[0m\n\u001b[0m                   if! (* left_val == * right_val)\u001b[0m\n\u001b[0m                   {\u001b[0m\n\u001b[0m                       let kind = $crate :: panicking :: AssertKind :: Eq ; $crate ::\u001b[0m\n\u001b[0m                       panicking ::\u001b[0m\n\u001b[0m                       assert_failed(kind, & * left_val, & * right_val, $crate :: option\u001b[0m\n\u001b[0m                       :: Option :: None) ;\u001b[0m\n\u001b[0m                   }\u001b[0m\n\u001b[0m               }\u001b[0m\n\u001b[0m           }`\u001b[0m\n\n"}
{"message":"trace_macro","code":null,"level":"note","spans":[{"file_name":"tests/macro_test.rs","byte_start":2589,"byte_end":2632,"line_start":104,"line_end":104,"column_start":13,"column_end":56,"is_primary":true,"text":[{"text":"            eprintln!(\"Field value: {:?}\", field_value);","highlight_start":13,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expanding `eprintln! { \"Field value: {:?}\", field_value }`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to `{\n    $crate :: io ::\n    _eprint($crate :: format_args_nl! (\"Field value: {:?}\", field_value)) ;\n}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m\u001b[1m: trace_macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:104:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            eprintln!(\"Field value: {:?}\", field_value);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expanding `eprintln! { \"Field value: {:?}\", field_value }`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to `{\u001b[0m\n\u001b[0m                $crate :: io ::\u001b[0m\n\u001b[0m                _eprint($crate :: format_args_nl! (\"Field value: {:?}\", field_value)) ;\u001b[0m\n\u001b[0m            }`\u001b[0m\n\n"}
{"message":"trace_macro","code":null,"level":"note","spans":[{"file_name":"tests/macro_test.rs","byte_start":2663,"byte_end":2691,"line_start":106,"line_end":106,"column_start":13,"column_end":41,"is_primary":true,"text":[{"text":"            eprintln!(\"Field not found\");","highlight_start":13,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expanding `eprintln! { \"Field not found\" }`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to `{ $crate :: io :: _eprint($crate :: format_args_nl! (\"Field not found\")) ; }`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m\u001b[1m: trace_macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:106:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            eprintln!(\"Field not found\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expanding `eprintln! { \"Field not found\" }`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to `{ $crate :: io :: _eprint($crate :: format_args_nl! (\"Field not found\")) ; }`\u001b[0m\n\n"}
{"message":"trace_macro","code":null,"level":"note","spans":[{"file_name":"tests/macro_test.rs","byte_start":2712,"byte_end":2727,"line_start":109,"line_end":109,"column_start":9,"column_end":24,"is_primary":true,"text":[{"text":"        assert_eq!(1,0);","highlight_start":9,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expanding `assert_eq! { 1, 0 }`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to `match(& 1, & 0)\n{\n    (left_val, right_val) =>\n    {\n        if! (* left_val == * right_val)\n        {\n            let kind = $crate :: panicking :: AssertKind :: Eq ; $crate ::\n            panicking ::\n            assert_failed(kind, & * left_val, & * right_val, $crate :: option\n            :: Option :: None) ;\n        }\n    }\n}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m\u001b[1m: trace_macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:109:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        assert_eq!(1,0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expanding `assert_eq! { 1, 0 }`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to `match(& 1, & 0)\u001b[0m\n\u001b[0m            {\u001b[0m\n\u001b[0m                (left_val, right_val) =>\u001b[0m\n\u001b[0m                {\u001b[0m\n\u001b[0m                    if! (* left_val == * right_val)\u001b[0m\n\u001b[0m                    {\u001b[0m\n\u001b[0m                        let kind = $crate :: panicking :: AssertKind :: Eq ; $crate ::\u001b[0m\n\u001b[0m                        panicking ::\u001b[0m\n\u001b[0m                        assert_failed(kind, & * left_val, & * right_val, $crate :: option\u001b[0m\n\u001b[0m                        :: Option :: None) ;\u001b[0m\n\u001b[0m                    }\u001b[0m\n\u001b[0m                }\u001b[0m\n\u001b[0m            }`\u001b[0m\n\n"}
{"message":"trace_macro","code":null,"level":"note","spans":[{"file_name":"tests/macro_test.rs","byte_start":3008,"byte_end":3032,"line_start":121,"line_end":121,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        println!(\"{:?}\", schema);","highlight_start":9,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expanding `println! { \"{:?}\", schema }`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to `{ $crate :: io :: _print($crate :: format_args_nl! (\"{:?}\", schema)) ; }`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m\u001b[1m: trace_macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:121:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        println!(\"{:?}\", schema);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expanding `println! { \"{:?}\", schema }`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to `{ $crate :: io :: _print($crate :: format_args_nl! (\"{:?}\", schema)) ; }`\u001b[0m\n\n"}
{"message":"trace_macro","code":null,"level":"note","spans":[{"file_name":"tests/macro_test.rs","byte_start":3097,"byte_end":3136,"line_start":124,"line_end":124,"column_start":9,"column_end":48,"is_primary":true,"text":[{"text":"        assert_eq!(schema.field_names.len(), 3);  // Assuming MyStruct has 2 fields","highlight_start":9,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expanding `assert_eq! { schema.field_names.len(), 3 }`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to `match(& schema.field_names.len(), & 3)\n{\n    (left_val, right_val) =>\n    {\n        if! (* left_val == * right_val)\n        {\n            let kind = $crate :: panicking :: AssertKind :: Eq ; $crate ::\n            panicking ::\n            assert_failed(kind, & * left_val, & * right_val, $crate :: option\n            :: Option :: None) ;\n        }\n    }\n}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m\u001b[1m: trace_macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:124:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        assert_eq!(schema.field_names.len(), 3);  // Assuming MyStruct has 2 fields\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expanding `assert_eq! { schema.field_names.len(), 3 }`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to `match(& schema.field_names.len(), & 3)\u001b[0m\n\u001b[0m            {\u001b[0m\n\u001b[0m                (left_val, right_val) =>\u001b[0m\n\u001b[0m                {\u001b[0m\n\u001b[0m                    if! (* left_val == * right_val)\u001b[0m\n\u001b[0m                    {\u001b[0m\n\u001b[0m                        let kind = $crate :: panicking :: AssertKind :: Eq ; $crate ::\u001b[0m\n\u001b[0m                        panicking ::\u001b[0m\n\u001b[0m                        assert_failed(kind, & * left_val, & * right_val, $crate :: option\u001b[0m\n\u001b[0m                        :: Option :: None) ;\u001b[0m\n\u001b[0m                    }\u001b[0m\n\u001b[0m                }\u001b[0m\n\u001b[0m            }`\u001b[0m\n\n"}
{"message":"unused import: `super::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests/macro_test.rs","byte_start":84,"byte_end":92,"line_start":5,"line_end":5,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"    use super::*;","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tests/macro_test.rs","byte_start":80,"byte_end":93,"line_start":5,"line_end":5,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"    use super::*;","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `super::*`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:5:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use super::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `proc_macro2::TokenStream`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests/macro_test.rs","byte_start":150,"byte_end":174,"line_start":7,"line_end":7,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"    use proc_macro2::TokenStream;","highlight_start":9,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tests/macro_test.rs","byte_start":146,"byte_end":175,"line_start":7,"line_end":7,"column_start":5,"column_end":34,"is_primary":true,"text":[{"text":"    use proc_macro2::TokenStream;","highlight_start":5,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `proc_macro2::TokenStream`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:7:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use proc_macro2::TokenStream;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `quote::quote`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests/macro_test.rs","byte_start":184,"byte_end":196,"line_start":8,"line_end":8,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    use quote::quote;","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tests/macro_test.rs","byte_start":180,"byte_end":197,"line_start":8,"line_end":8,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"    use quote::quote;","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `quote::quote`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:8:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use quote::quote;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `syn::punctuated::Punctuated`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests/macro_test.rs","byte_start":264,"byte_end":291,"line_start":11,"line_end":11,"column_start":9,"column_end":36,"is_primary":true,"text":[{"text":"    use syn::punctuated::Punctuated;","highlight_start":9,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tests/macro_test.rs","byte_start":260,"byte_end":292,"line_start":11,"line_end":11,"column_start":5,"column_end":37,"is_primary":true,"text":[{"text":"    use syn::punctuated::Punctuated;","highlight_start":5,"highlight_end":37}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `syn::punctuated::Punctuated`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:11:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use syn::punctuated::Punctuated;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `syn::parse_macro_input`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests/macro_test.rs","byte_start":301,"byte_end":323,"line_start":12,"line_end":12,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"    use syn::parse_macro_input;","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tests/macro_test.rs","byte_start":297,"byte_end":324,"line_start":12,"line_end":12,"column_start":5,"column_end":32,"is_primary":true,"text":[{"text":"    use syn::parse_macro_input;","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `syn::parse_macro_input`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:12:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use syn::parse_macro_input;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `syn::token::Comma`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests/macro_test.rs","byte_start":333,"byte_end":350,"line_start":13,"line_end":13,"column_start":9,"column_end":26,"is_primary":true,"text":[{"text":"    use syn::token::Comma;","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tests/macro_test.rs","byte_start":329,"byte_end":351,"line_start":13,"line_end":13,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    use syn::token::Comma;","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `syn::token::Comma`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use syn::token::Comma;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `syn::parse_quote`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests/macro_test.rs","byte_start":360,"byte_end":376,"line_start":14,"line_end":14,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"    use syn::parse_quote;","highlight_start":9,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tests/macro_test.rs","byte_start":356,"byte_end":377,"line_start":14,"line_end":14,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"    use syn::parse_quote;","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `syn::parse_quote`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:14:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use syn::parse_quote;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused variable: `a`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/macro_test.rs","byte_start":1097,"byte_end":1098,"line_start":47,"line_end":47,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let a: [&'static str; 3] = [\"10\",\"11\",\"12\"];","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/macro_test.rs","byte_start":1097,"byte_end":1098,"line_start":47,"line_end":47,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let a: [&'static str; 3] = [\"10\",\"11\",\"12\"];","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"_a","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `a`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:47:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let a: [&'static str; 3] = [\"10\",\"11\",\"12\"];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_a`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `b`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/macro_test.rs","byte_start":1183,"byte_end":1184,"line_start":50,"line_end":50,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let b = User::toSchema();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/macro_test.rs","byte_start":1183,"byte_end":1184,"line_start":50,"line_end":50,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let b = User::toSchema();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"_b","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `b`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:50:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let b = User::toSchema();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_b`\u001b[0m\n\n"}
{"message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/macro_test.rs","byte_start":1659,"byte_end":1664,"line_start":69,"line_end":69,"column_start":21,"column_end":26,"is_primary":true,"text":[{"text":"        if let Some(value) = field_value {","highlight_start":21,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/macro_test.rs","byte_start":1659,"byte_end":1664,"line_start":69,"line_end":69,"column_start":21,"column_end":26,"is_primary":true,"text":[{"text":"        if let Some(value) = field_value {","highlight_start":21,"highlight_end":26}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:69:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(value) = field_value {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/macro_test.rs","byte_start":2554,"byte_end":2559,"line_start":103,"line_end":103,"column_start":21,"column_end":26,"is_primary":true,"text":[{"text":"        if let Some(value) = field_value {","highlight_start":21,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/macro_test.rs","byte_start":2554,"byte_end":2559,"line_start":103,"line_end":103,"column_start":21,"column_end":26,"is_primary":true,"text":[{"text":"        if let Some(value) = field_value {","highlight_start":21,"highlight_end":26}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:103:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(value) = field_value {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"message":"function `test_user` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"tests/macro_test.rs","byte_start":1853,"byte_end":1862,"line_start":79,"line_end":79,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn test_user() {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `test_user` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:79:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn test_user() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"message":"method `get_field_value` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"tests/macro_test.rs","byte_start":1964,"byte_end":1973,"line_start":85,"line_end":85,"column_start":9,"column_end":18,"is_primary":false,"text":[{"text":"        impl User {","highlight_start":9,"highlight_end":18}],"label":"method in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/macro_test.rs","byte_start":1991,"byte_end":2006,"line_start":86,"line_end":86,"column_start":16,"column_end":31,"is_primary":true,"text":[{"text":"            fn get_field_value(&self, field_name: &str) -> Option<&dyn Any> {","highlight_start":16,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `get_field_value` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:86:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        impl User {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn get_field_value(&self, field_name: &str) -> Option<&dyn Any> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"function `test_schema_provider` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"tests/macro_test.rs","byte_start":2742,"byte_end":2762,"line_start":111,"line_end":111,"column_start":8,"column_end":28,"is_primary":true,"text":[{"text":"    fn test_schema_provider() {","highlight_start":8,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `test_schema_provider` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/macro_test.rs:111:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn test_schema_provider() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"14 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 14 warnings emitted\u001b[0m\n\n"}
